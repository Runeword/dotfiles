% docker, install

# Start docker after install
sudo systemctl start docker

# Start docker on boot
sudo systemctl enable docker.service \
sudo systemctl enable containerd.service

# Disable docker start on boot
sudo systemctl disable docker.service \
sudo systemctl disable containerd.service

% docker

# Scale service with docker-compose and nginx
docker-compose up --scale <service>=4 -d

# Search the Docker Hub for images
docker search

# Pull an image or a repository from a registry
docker pull

# Build an image from a Dockerfile
docker build --tag foo .

# Force docker-compose to recreate images
docker-compose build

# Displays log output from services
docker-compose logs

# Builds, (re)creates, starts, and attaches to containers for a service
docker-compose up -d

# Specify service
docker-compose up -d <servicename>

# Specify file
docker-compose -f <docker-compose-dev.yml> up -d

# Remove containers and networks defined in the Compose file
docker-compose down

# Also Remove images defined in the Compose file
docker-compose down --rmi all

# docker-compose
docker-compose stop

# docker-compose
docker-compose rm

# docker-compose
docker-compose start

# docker-compose
docker-compose restart

# docker-compose
docker-compose ps

# List container logs
docker logs foo

# Display live log output
docker logs -f <container-id>

# Copy the last 400 lines of logs into a file
docker logs --tail 400 containername >& logs/myFile.log

# Show path of the container logs file
docker inspect --format='{{.LogPath}}' <container-name>

# docker attach
docker attach <container-id>

# Create container from image
docker create <image>

# Start container
docker start <container>

# Create and start container
docker run

# Create network
docker network create <network-name>

# docker network
docker network inspect <network-name>

# List networks
docker network ls

# Delete network
docker network rm foo

# Return container informations
docker inspect <container id>

# Return container IP
docker inspect -f '{{range .NetworkSetks}}{{.IPAddress}}{{end}}' <container>

# docker images
docker images -a

# Create a volume
docker volume create

# Display detailed information on one or more volumes
docker volume inspect

# List volumes
docker volume ls

# Remove all unused local volumes
docker volume prune

# Remove one or more volumes
docker volume rm

# Remove container and its volume
docker rm -v <container-name>

# Copy container file to the host
docker cp <container-id>:/file/path/within/container /host/path/target

# Create container from image
docker create -it --name=<"wonderful_mobidock"> <debian:7>

# Create container from image with ports and volume
docker run -d -v --restart=always <$PWD:/var/www> -p <82:80> <klokantech/tileserver-php>

# Run bash in the container, i = interactive t = tty
docker exec -it <foo> bash

% docker, manage

# Display live container(s) resource usage statistics
docker stats

# List running containers
docker ps

# List running containers, full labels
docker ps --no-trunc

# List running containers, only name label
docker ps --format "{{.Names}}"

# List all containers
docker ps -a

# List images
docker images

# Stop running container
docker stop

# Remove container
docker rm

# Stop and remove containers
docker rm -f

# List exited containers
docker ps -a -f status=exited

# Remove exited containers
docker rm $(docker ps -a -f status=exited -q)

# Remove image
docker rmi

% docker, clean

# List containers of foo network
docker network inspect foo

# Stop all containers
docker stop `docker ps -a -q`

# Remove all containers
docker rm `docker ps -a -q`

# Remove all images
docker rmi `docker images -q`

# Force remove all images
docker rmi -f `docker images -q`

# Remove dangling volumes
docker volume rm \
`docker volume ls -q -f dangling=true`

# Remove unused containers, networks, images, build cache, volumes
docker system prune --volumes

# Remove unused volumes
docker volume prune

# Remove unused images
docker image prune

# Remove unused networks
docker network prune

# Remove unused containers
docker container prune
