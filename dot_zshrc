# shellcheck disable=SC2034
# shellcheck disable=SC2154
# shellcheck disable=SC1094
# shellcheck disable=SC1090
# shellcheck disable=SC1091

# Exit if not interactive shell
[[ $- != *i* ]] && return

autoload -Uz compinit
compinit

HISTFILE=~/.zsh_history
HISTSIZE=10000
SAVEHIST=10000
setopt EXTENDED_HISTORY
setopt HIST_IGNORE_ALL_DUPS
setopt HIST_REDUCE_BLANKS
setopt SHARE_HISTORY
setopt INC_APPEND_HISTORY
export HISTORY_IGNORE="(! *)"


# ------------------------------------ ZSH hooks
autoload -Uz add-zsh-hook

# starship option 'add_newline = true' has weird behavior in zsh, use this instead 
__add_newline() {
    echo ""
}

# Use the precmd hook to execute the __add_newline function just before the prompt is displayed
add-zsh-hook precmd __add_newline

# ------------------------------------ ENV variables
[ -f "$HOME/.config/shell/variables.sh" ] && source "$HOME/.config/shell/variables.sh"

source "$XDG_CONFIG_HOME/zsh/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh"

# source "$XDG_CONFIG_HOME/shell/scripts/ssh-agent.sh"

# zstyle ':completion:*' cache-path "$XDG_CACHE_HOME/zsh/zcompcache"
# compinit -d "$XDG_CACHE_HOME/zsh/zcompdump-$ZSH_VERSION"

# ------------------------------------ Word characters
autoload -U select-word-style
select-word-style bash
setopt GLOB_DOTS
KEYTIMEOUT=1

# ------------------------------------ Remove default aliases
unalias run-help 2>/dev/null
unalias which-command 2>/dev/null
unalias l 2>/dev/null
unalias ll 2>/dev/null
unalias ls 2>/dev/null

# ------------------------------------ Remove default bindings
bindkey -r '^['
bindkey -r '^V'
bindkey -r '^W'
bindkey -r '^Q'

# ------------------------------------ Move
bindkey '^[[13;2u' accept-line  # Shift+Enter
bindkey '^[OD' backward-char    # Left Arrow
bindkey '^[OC' forward-char     # Right Arrow
bindkey '^[[1;5D' backward-word # Ctrl+Left Arrow
bindkey '^[[1;5C' forward-word  # Ctrl+Right Arrow
bindkey "\e[9;5u" forward-word  # Ctrl+Tab
bindkey "\e[9;6u" backward-word # Ctrl+Shift+Tab
bindkey '^E' end-of-line        # Ctrl+E
bindkey '^A' beginning-of-line  # Ctrl+A

# ------------------------------------ Kill
bindkey '^U' kill-buffer        # Ctrl+U
bindkey '^J' backward-kill-line # Ctrl+J
bindkey '^K' kill-line          # Ctrl+K
bindkey '^H' backward-kill-word # Ctrl+H
bindkey '^[[3;5~' kill-word     # Ctrl+Delete

# ------------------------------------ Search history
bindkey '^[OA' history-beginning-search-backward # Up Arrow
bindkey '^[[A' history-beginning-search-backward # Up Arrow
bindkey '^[[B' history-beginning-search-forward  # Down Arrow
bindkey '^[OB' history-beginning-search-forward  # Down Arrow
# bindkey -- "${terminfo[kcuu1]}" history-beginning-search-backward
# bindkey -- "${terminfo[kcud1]}" history-beginning-search-backward

# ------------------------------------ Complete
zmodload zsh/complist

zstyle ':completion:*' matcher-list 'm:{[:lower:]}={[:upper:]}' 'r:|[._-]=* r:|=*' 'l:|=* r:|=*'
zstyle ':completion:*:*:*:*:descriptions' format '%F{245}%d%f'
# shellcheck disable=SC2296
zstyle ':completion:*:default' list-colors "${(s.:.)LS_COLORS}"
zstyle ':completion:*' group-name ''
zstyle ':completion:*' menu select interactive

bindkey -M menuselect '^I' vi-down-line-or-history
bindkey -M menuselect '^[[Z' vi-up-line-or-history

setopt MENU_COMPLETE
# bindkey -v '^?' backward-delete-char

# zstyle ':completion:*' menu select
# bindkey '^I' complete-word
# bindkey '^[[Z' reverse-menu-complete

# # ------------------------------------ zsh-abbr
# abbr import-aliases
# ABBR_DEFAULT_BINDINGS=0
# bindkey ' ' abbr-expand-and-space
# bindkey '^M' accept-line
# # bindkey '^M' abbr-expand-and-accept

# ------------------------------------ zsh-autosuggestions
ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE="fg=#7f7f7f"
bindkey 'CSI 13 ; 5 u' autosuggest-execute
bindkey '\x1b[13;5u' autosuggest-execute

# ------------------------------------ zsh-autocomplete
# zstyle ':completion:*:*:*:*:descriptions' format '%F{245}%d%f'
# zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}
# bindkey '\t' menu-select "$terminfo[kcbt]" menu-selected
# bindkey -M menuselect '\t' menu-complete "$terminfo[kcbt]" reverse-menu-complete
# bindkey -M menuselect '\r' .accept-line
# bindkey -M menuselect ' ' undo

[ -f "$XDG_CONFIG_HOME/shell/aliases.sh" ] && source "$XDG_CONFIG_HOME/shell/aliases.sh"

# ------------------------------------ Functions
if [ -d "$XDG_CONFIG_HOME/shell/functions" ]; then
  for file in "$XDG_CONFIG_HOME/shell/functions"/*; do
    . "$file"
  done
fi

__on_empty_buffer() {
  if [[ "$BUFFER" = "" ]]; then
    eval "$1"
    local precmd
    for precmd in $precmd_functions; do
      $precmd
    done
    zle reset-prompt
  else
    eval "$2"
  fi
}

# __alias_or_delete() { __on_empty_buffer __run_alias "zle backward-delete-char"; }
# zle -N __alias_or_delete
# bindkey '^[[3~' __alias_or_delete

# __yazi() { __on_empty_buffer "yazi < $TTY"; }
# zle -N __yazi
# bindkey '\x1b[27;2u' __yazi

# bindkey '^[' __yazi
# bindkey '\e' __yazi

# __tmux_copy_mode() { __on_empty_buffer "tmux copy-mode > /dev/null 2>&1"; }
# zle -N __tmux_copy_mode
# bindkey '^[' __tmux_copy_mode

# __history_or_delete() { __on_empty_buffer "zle fzf-history-widget && zle accept-line" "zle backward-delete-char"; }
# zle -N __history_or_delete
# bindkey '^?' __history_or_delete
# # bindkey '^[[3;2~' __history_or_delete

# __navi_custom_or_space() { __on_empty_buffer navi "LBUFFER+=' '; zle autosuggest-fetch"; }
# zle -N __navi_custom_or_space
# bindkey ' ' __navi_custom_or_space

# __leader() { __on_empty_buffer __leader_widget; }
# zle -N __leader
# bindkey '^[' __leader

__last_command_or_delete() { __on_empty_buffer "BUFFER=${history[$((HISTCMD-1))]}; zle accept-line" 'zle backward-delete-char'; }
zle -N __last_command_or_delete
bindkey '^[[3;2~' __last_command_or_delete

# __ls_or_space() { __on_empty_buffer 'command ls --almost-all --color --width 90;' "LBUFFER+=' '; zle autosuggest-fetch"; }
# zle -N __ls_or_space
# bindkey ' ' __ls_or_space

__leader_or_space() { __on_empty_buffer __leader_widget "LBUFFER+=' '; zle autosuggest-fetch"; }
zle -N __leader_or_space
bindkey ' ' __leader_or_space

__leader_or_accept() { __on_empty_buffer __leader_widget 'zle accept-line'; }
zle -N __leader_or_accept
bindkey '^M' __leader_or_accept

# __ls() { __on_empty_buffer 'command ls --almost-all --color --width 90;' 'zle accept-line'; }
# zle -N __ls
# bindkey '^M' __ls

# __leader_or_space() { __on_empty_buffer __leader_widget "LBUFFER+=' '; zle autosuggest-fetch"; }
# zle -N __leader_or_space
# bindkey ' ' __leader_or_space

__tmux_search() { __on_empty_buffer 'tmux copy-mode; tmux command-prompt -i -p "" "send -X search-forward-incremental \"%%%\""' LBUFFER+="/"; }
zle -N __tmux_search
bindkey '/' __tmux_search

__cheatsheet_or_esc() { __on_empty_buffer navi; }
zle -N __cheatsheet_or_esc
bindkey '^[' __cheatsheet_or_esc

__history_or_esc() { __on_empty_buffer "zle fzf-history-widget && zle accept-line"; }
zle -N __history_or_esc
bindkey '\u001B[27;2u' __history_or_esc

# __navi_or_space() { __on_empty_buffer "navi --path ~/.local/share/navi/cheats" "LBUFFER+=' '; zle autosuggest-fetch"; }
# zle -N __navi_or_space
# bindkey '\x1b[32;2u' __navi_or_space

__ls_or_space() { __on_empty_buffer 'echo ls; ls' "LBUFFER+=' '; zle autosuggest-fetch"; }
# __ls_or_space() { __on_empty_buffer 'echo; command ls --almost-all --color --width 90;' "LBUFFER+=' '; zle autosuggest-fetch"; }
zle -N __ls_or_space
bindkey '\x1b[32;2u' __ls_or_space

__open_file_or_complete() { __on_empty_buffer __open_file 'zle expand-or-complete'; }
zle -N __open_file_or_complete
bindkey '^I' __open_file_or_complete

# __yazi() { __on_empty_buffer "yazi < $TTY"; }
# zle -N __yazi
# bindkey '^[' __yazi
# bindkey '\x1b[27;2u' __yazi

# __yazi() { __on_empty_buffer "__yazi_cd < $TTY"; }
# zle -N __yazi
# bindkey '^[' __yazi

__ripgrep_or_complete() { __on_empty_buffer __ripgrep 'zle expand-or-complete'; }
zle -N __ripgrep_or_complete
bindkey '^[[Z' __ripgrep_or_complete

_zsh_autosuggest_strategy_custom() {
  suggestion=$(grep -h -m1 -E "^[^#%]*$(printf '%s' "$1" | sed 's/[]\[\^\$\.\*\{\}\(\)\\]/\\&/g')" ~/.config/navi/* | head -n 1)
  # suggestion=$(navi --query "$1" --best-match --print) # navi does not support non-interactive mode https://github.com/denisidoro/navi/issues/808
}

ZSH_AUTOSUGGEST_STRATEGY=(history custom completion)

compdef _cd __cd # Use the built-in cd completion for the custom cd function
compdef _cd __mkdir_cd
compdef _files __chezmoi_add

__prevd_widget() { __prevd; zle reset-prompt; }
zle -N __prevd_widget
bindkey '^[[5~' __prevd_widget

__nextd_widget() { __nextd; zle reset-prompt; }
zle -N __nextd_widget
bindkey '^[[6~' __nextd_widget

# ------------------------------------ Plugins

eval "$(navi widget zsh)"
eval "$(starship init zsh)"
eval "$(zoxide init --no-cmd zsh)"
eval "$(direnv hook zsh)"

if [[ ${options[zle]} = on ]]; then
  . "/usr/share/fzf/completion.zsh"
  . "/usr/share/fzf/key-bindings.zsh"
fi

# handle_interrupt() {
#     echo ''
# }
# trap 'handle_interrupt' SIGINT
# pass show GEMINI_API_KEY > /dev/null
